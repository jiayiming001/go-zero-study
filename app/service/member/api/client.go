// Code generated by goctl. DO NOT EDIT!
// Source: add.proto

//go:generate mockgen -destination ./adder_mock.go -package adder -source $GOFILE

package api

import (
	"context"
	"go-zero-study/zrpc"
)

type (
	MemberCli interface {
		GetMemberByID(ctx context.Context, in *GetMemberByIDReq) (*MemberResp, error)
		GetMemberByPhone(ctx context.Context, in *GetMemberByPhoneReq) (*MemberResp, error)
		GetMemberMaxAge(ctx context.Context, in *GetMemberMaxAgeReq) (*GetMemberMaxAgeResp, error)
		QueryMemberByName(ctx context.Context, in *QueryMemberByNameReq) (*QueryMemberByNameResp, error)
		QueryMemberByIDs(ctx context.Context, in *QueryMemberByIDsReq) (*QueryMemberByIDsResp, error)
		AddMember(ctx context.Context, in *AddMemberReq) (*IDResp, error)
		BatchAddMember(ctx context.Context, in *BatchAddMemberReq) (*BatchAddMemberResp, error)
		InitMember(ctx context.Context, in *InitMemberReq) (*EmptyResp, error)
		UpdateMember(ctx context.Context, in *UpdateMemberReq) (*EmptyResp, error)
		UpdateSomeMember(ctx context.Context, in *UpdateSomeMemberReq) (*EmptyResp, error)
		SetMember(ctx context.Context, in *SetMemberReq) (*EmptyResp, error)
		SortMember(ctx context.Context, in *SortMemberReq) (*EmptyResp, error)
		DelMember(ctx context.Context, in *DeleteMemberReq) (*EmptyResp, error)
		AddFavorite(ctx context.Context, in *AddFavoriteReq) (*IDResp, error)
		ErrorTest(ctx context.Context, in *GetMemberByIDReq) (*EmptyResp, error)
	}

	defaultClient struct {
		cli zrpc.Client
	}
)

func New(cli zrpc.Client) MemberCli {
	return &defaultClient{
		cli: cli,
	}
}

func (m *defaultClient) GetMemberByID(ctx context.Context, in *GetMemberByIDReq) (*MemberResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.GetMemberByID(ctx, in)
}

func (m *defaultClient) GetMemberByPhone(ctx context.Context, in *GetMemberByPhoneReq) (*MemberResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.GetMemberByPhone(ctx, in)
}

func (m *defaultClient) GetMemberMaxAge(ctx context.Context, in *GetMemberMaxAgeReq) (*GetMemberMaxAgeResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.GetMemberMaxAge(ctx, in)
}

func (m *defaultClient) QueryMemberByName(ctx context.Context, in *QueryMemberByNameReq) (*QueryMemberByNameResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.QueryMemberByName(ctx, in)
}

func (m *defaultClient) QueryMemberByIDs(ctx context.Context, in *QueryMemberByIDsReq) (*QueryMemberByIDsResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.QueryMemberByIDs(ctx, in)
}

func (m *defaultClient) AddMember(ctx context.Context, in *AddMemberReq) (*IDResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.AddMember(ctx, in)
}

func (m *defaultClient) BatchAddMember(ctx context.Context, in *BatchAddMemberReq) (*BatchAddMemberResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.BatchAddMember(ctx, in)
}

func (m *defaultClient) InitMember(ctx context.Context, in *InitMemberReq) (*EmptyResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.InitMember(ctx, in)
}

func (m *defaultClient) UpdateMember(ctx context.Context, in *UpdateMemberReq) (*EmptyResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.UpdateMember(ctx, in)
}

func (m *defaultClient) UpdateSomeMember(ctx context.Context, in *UpdateSomeMemberReq) (*EmptyResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.UpdateSomeMember(ctx, in)
}

func (m *defaultClient) SetMember(ctx context.Context, in *SetMemberReq) (*EmptyResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.SetMember(ctx, in)
}

func (m *defaultClient) SortMember(ctx context.Context, in *SortMemberReq) (*EmptyResp, error){
	client := NewMemberRPCClient(m.cli.Conn())
	return client.SortMember(ctx, in)
}

func (m *defaultClient) DelMember(ctx context.Context, in *DeleteMemberReq) (*EmptyResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.DeleteMember(ctx, in)
}

func (m *defaultClient) AddFavorite(ctx context.Context, in *AddFavoriteReq) (*IDResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.AddFavorite(ctx, in)
}

func (m *defaultClient) ErrorTest(ctx context.Context, in *GetMemberByIDReq) (*EmptyResp, error) {
	client := NewMemberRPCClient(m.cli.Conn())
	return client.ErrorTest(ctx, in)
}
