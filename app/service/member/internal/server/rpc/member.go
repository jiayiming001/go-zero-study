// Code generated by goctl. DO NOT EDIT!
// Source: check.proto

package rpc

import (
	"context"
	"github.com/pkg/errors"
	"go-zero-study/app/service/member/api"
	"go-zero-study/app/service/member/internal/model"
	"go-zero-study/app/service/member/internal/service"
	"go-zero-study/core/ecode"
	"go-zero-study/core/logx"
	"go-zero-study/core/metadata"
)

// dto => dao

func (s *Server) GetMemberByID(ctx context.Context, in *api.GetMemberByIDReq) (*api.MemberResp, error) {
	logx.WithContext(ctx).Infof("color:%s", metadata.String(ctx, metadata.Color))
	logx.WithContext(ctx).Infof("mid:%d", metadata.Int64(ctx, metadata.Mid))
	l := service.NewMemberLogic(ctx, s.svc)
	member, err := l.GetMemberByID(in.Id)
	if err != nil {
		return nil, err
	}

	return &api.MemberResp{
		Member: &api.Member{
			Id:        member.Id,
			Phone:     member.Phone,
			Name:      member.Name,
			Age:       member.Age,
			Address:   member.Address,
			CreatedAt: member.CreatedAt.Unix(),
			UpdatedAt: member.UpdatedAt.Unix(),
		},
	}, nil
}

func (s *Server) GetMemberByPhone(ctx context.Context, in *api.GetMemberByPhoneReq) (*api.MemberResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	member, err := l.GetMemberByPhone(in.Phone)
	if err != nil {
		return nil, err
	}

	return &api.MemberResp{
		Member: &api.Member{
			Id:        member.Id,
			Phone:     member.Phone,
			Name:      member.Name,
			Age:       member.Age,
			Address:   member.Address,
			CreatedAt: member.CreatedAt.Unix(),
			UpdatedAt: member.UpdatedAt.Unix(),
		},
	}, nil
}

func (s *Server) GetMemberMaxAge(ctx context.Context, in *api.GetMemberMaxAgeReq) (*api.GetMemberMaxAgeResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	age, err := l.GetMemberMaxAge()
	if err != nil {
		return nil, err
	}

	return &api.GetMemberMaxAgeResp{
		Age: age,
	}, nil
}

func (s *Server) QueryMemberByName(ctx context.Context, in *api.QueryMemberByNameReq) (*api.QueryMemberByNameResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	members, err := l.QueryMemberByName(in.Name)
	if err != nil {
		return nil, err
	}

	var mResp []*api.Member
	for _, member := range members {
		mResp = append(mResp, &api.Member{
			Id:        member.Id,
			Phone:     member.Phone,
			Name:      member.Name,
			Age:       member.Age,
			Address:   member.Address,
			CreatedAt: member.CreatedAt.Unix(),
			UpdatedAt: member.UpdatedAt.Unix(),
		})
	}
	return &api.QueryMemberByNameResp{
		List: mResp,
	}, nil
}

func (s *Server) QueryMemberByIDs(ctx context.Context, in *api.QueryMemberByIDsReq) (*api.QueryMemberByIDsResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	members, err := l.QueryMemberByIDs(in.Ids)
	if err != nil {
		return nil, err
	}

	mResp := make(map[int64]*api.Member)
	for k, member := range members {
		mResp[k] = &api.Member{
			Id:        member.Id,
			Phone:     member.Phone,
			Name:      member.Name,
			Age:       member.Age,
			Address:   member.Address,
			CreatedAt: member.CreatedAt.Unix(),
			UpdatedAt: member.UpdatedAt.Unix(),
		}
	}
	return &api.QueryMemberByIDsResp{
		List: mResp,
	}, nil
}

func (s *Server) AddMember(ctx context.Context, in *api.AddMemberReq) (*api.IDResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	id, err := l.AddMember(model.Member{
		Phone:   in.Phone,
		Name:    in.Name,
		Age:     in.Age,
		Address: in.Address,
	})
	if err != nil {
		return nil, err
	}
	return &api.IDResp{
		Id: id,
	}, nil
}

func (s *Server) BatchAddMember(ctx context.Context, in *api.BatchAddMemberReq) (*api.BatchAddMemberResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	var args []model.Member
	for _, v := range in.AddMemberReq {
		args = append(args, model.Member{
			Phone:   v.Phone,
			Name:    v.Name,
			Age:     v.Age,
			Address: v.Address,
		})
	}
	affectRow, err := l.BatchAddMember(args)
	if err != nil {
		return nil, err
	}
	return &api.BatchAddMemberResp{
		AffectRow: affectRow,
	}, nil
}

func (s *Server) InitMember(ctx context.Context, in *api.InitMemberReq) (*api.EmptyResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	err := l.InitMember(model.Member{
		Phone:   in.Phone,
		Name:    in.Name,
		Age:     in.Age,
		Address: in.Address,
	})
	if err != nil {
		return nil, err
	}
	return &api.EmptyResp{}, nil
}

func (s *Server) DeleteMember(ctx context.Context, in *api.DeleteMemberReq) (*api.EmptyResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	err := l.DelMember(in.Id)
	if err != nil {
		return nil, err
	}
	return &api.EmptyResp{}, nil
}

func (s *Server) SetMember(ctx context.Context, in *api.SetMemberReq) (*api.EmptyResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	err := l.SetMember(model.Member{
		Id:      in.Id,
		Phone:   in.Phone,
		Name:    in.Name,
		Age:     in.Age,
		Address: in.Address,
	})
	return &api.EmptyResp{}, err
}

func (s *Server) UpdateMember(ctx context.Context, in *api.UpdateMemberReq) (*api.EmptyResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	err := l.UpdateMember(model.Member{
		Id:      in.Id,
		Phone:   in.Phone,
		Name:    in.Name,
		Age:     in.Age,
		Address: in.Address,
	})
	return &api.EmptyResp{}, err
}

func (s *Server) UpdateSomeMember(ctx context.Context, in *api.UpdateSomeMemberReq) (*api.EmptyResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	err := l.UpdateSome(model.Member{
		Id:      in.Id,
		Phone:   in.Phone,
		Name:    in.Name,
		Age:     in.Age,
		Address: in.Address,
	})
	return &api.EmptyResp{}, err
}

func (s *Server) SortMember(ctx context.Context, in *api.SortMemberReq) (*api.EmptyResp, error) {
	l := service.NewMemberLogic(ctx, s.svc)
	var args model.ArgMemberSort
	for _, v := range in.SortMember {
		args = append(args, model.MemberSort{Id: v.Id, OrderNum: v.OrderNum})
	}
	err := l.SortMember(args)
	return &api.EmptyResp{}, err
}

func (s *Server) ErrorTest(ctx context.Context, in *api.GetMemberByIDReq) (*api.EmptyResp, error) {

	return nil, errors.Wrapf(ecode.ErrConfigureReward, "ErrorTest")
	//return nil,errors.New("未知的随便错误")

}
